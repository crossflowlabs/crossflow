[%import "../util.eol";
import "pythonUtil.eol";%]
import time

# Tasks
[%for (t in w.getPyTasks()) {%]
from [%=package%].[%=t.name.toSnakeCaseLower()%] import [%=t.name%]
[%}%]

# Types
[% for (t in CrossflowLanguageModel!Type.all) {%]
from crossflow.[%=package%] import [%=t.name.toSnakeCaseLower()%]
[%}%]

# Streams
[%for (s in w.streams) {
	if(not s.inputOf.isEmpty()) {%]
from crossflow.[%=package%].[%=s.name.toSnakeCaseLower()%] import [%=s.name%]
[%	}
}%]

# Utility
from crossflow.[%=package%].[%=w.name.toSnakeCaseLower()%]_tasks import [%=w.name%]Tasks
from crossflow.runtime import BuiltinStream, Mode, LogLevel, Workflow, WorkflowConfig
from crossflow.serialization import Serializer, JsonSerializer


class [%=w.name%](Workflow):
    """NOTE: Auto-generated by [%=genRule%][%if (genDate.isDefined()) {%] on [%=genDate%][%}%]
    
    Do not edit this class manually
    """

    def __init__(
        self,
        name="",
        instance=None,
        broker_host="localhost",
        stomp_port=61613,
        mode=Mode.WORKER,
        cache=None,
        cache_enabled=True,
        delete_cache=None,
        excluded_tasks=None,
        enable_prefetch=False,
        use_ssl=False,
        ssl_key=None,
        ssl_cert=None,
        ssl_ca_certs=None,
    ):
                 
        super().__init__(name=name,
                         instance=instance,
                         broker_host=broker_host,
                         stomp_port=stomp_port,
                         mode=mode,
                         cache=cache,
                         cache_enabled=cache_enabled,
                         delete_cache=delete_cache,
                         excluded_tasks=excluded_tasks,
                         enable_prefetch=enable_prefetch,
                         use_ssl=use_ssl,
                         ssl_key=ssl_key,
                         ssl_cert=ssl_cert,
                         ssl_ca_certs=ssl_ca_certs)
                         
        # Streams
        [%for (s in w.streams) { %]
        self.[%=s.name.ftlc()%]: [%=s.getTypeHintName()%] = None
        [%}%]

        # Tasks
        [%for (t in w.getPyTasks()){%]
        self.[%=t.name.ftlc()%] = None
        if [%=w.name%]Tasks.[%=t.name.toSnakeCaseUpper()%] not in self._excluded_tasks:
            self.[%=t.name.ftlc()%] = [%=t.name%]()
            self.[%=t.name.ftlc()%].workflow = self
            self._tasks.append(self.[%=t.name.ftlc()%])
        [%}%]
        
    @classmethod
    def from_config(cls, config: WorkflowConfig):
        return cls(
    		name=config.name,
            instance=config.instance,
            broker_host=config.broker_host,
            stomp_port=config.broker_port,
            mode=config.mode,
            use_ssl=config.use_ssl,
            ssl_key=config.ssl_key,
            ssl_cert=config.ssl_cert,
            ssl_ca_certs=config.ssl_ca_certs,
        )

    def excluded_tasks(self, tasks=[]):
        assert isinstance(tasks, list)
        assert not tasks or [t for t in tasks if isinstance(t, [%=w.name%]Tasks)]
        self._excluded_tasks = tasks

    def createWorker(self):
        worker = [%=w.name%](Mode.WORKER)
        worker.instance(self._instance)
        return worker

    [%for (p in w.parameters) { %]
    def set[%=p.name.ftuc()%](self, [%=p.name%]):
        self.[%=p.name%] = [%=p.name%]

    def get[%=p.name.ftuc()%](self):
        return self.[%=p.name%]
        
    [%}%]

    """
     * Run with initial delay in ms before starting execution (after creating broker
     * if master)
     * 
     * @param delay
    """
    def run(self, delay=0):
        """Run with an initial delay before starting execution

        :param delay: delay in ms before this worker will start running. Defaults to 0
        :type delay: int
        """
        self._delay=delay

        try:
            time.sleep(delay)
            self.connect()
            
            # Initialise Streams
            [%for (s in w.streams) {%]
            [%=s.genInitStream()%]
            
            [%}
            
            if (not w.getPyTasks().isEmpty()) {%]
            if (self.is_worker()):
            	[%for (t in w.getPyTasks()){%]
                if not [%=w.name%]Tasks.[%=t.name.toSnakeCaseUpper()%] in self._excluded_tasks:
                    [%=t.setup()%]
            	[%}
            }%]
        except Exception as ex:
            self.local_logger.exception("")
            self.report_internal_exception(ex)

    [%for (s in w.streams) { %]
    def get[%=s.name%](self) -> [%=s.getTypeHintName()%]:
        return self.[%=s.name.ftlc()%]
        
    [%}%]
    [%for (t in w.tasks) {%]
    def get[%=t.name%](self):
        return self.[%=t.name.ftlc()%]
        
    [%}%]
    def _create_serializer(self) -> Serializer:
        return [%=w.getSerializer().~implClass%]()

    def _register_custom_serialization_types(self):
    [%for (t in w.types) {%]
        self._serializer.register_type([%=t.name.toSnakeCaseLower()%].[%=t.name%])
        [%for (e in t.fields.select(e|e.isTypeOf(CrossflowLanguageModel!EnumField))) {%]
        self._serializer.register_type([%=t.name.toSnakeCaseLower()%].[%=e.name.ftuc()%])
        [%}%]
    [%}%]


if __name__ == '__main__':
    config = WorkflowConfig()
    app = [%=w.name%].from_config(config)
    app.run()
    app.logger.log(LogLevel.INFO, "Finished Startup")
    while (not app.terminated):
        time.sleep(0.1)
    print("terminated")
    
[%
@template
operation Task setup() {%]
    [%for (i in self.input) { %]
    self.[%=i.name.ftlc()%].add_consumer(self.[%=self.name.ftlc()%], "[%=self.name%]")
    [%}%]
    [%for (o in self.output) { %]
    self.[%=self.name.ftlc()%].[%=o.name.toSnakeCaseLower()%]= self.[%=o.name.ftlc%]
    [%}%]
[%}

@template
operation Stream genInitStream() {
	if (self.inputOf.isEmpty()) {%]
self.[%=self.name.ftlc()%] = BuiltinStream("[%=self.name%]", self[%if (self.isTypeOf(Topic)) {%], True[%}%])
self.[%=self.name.ftlc()%].init()
	[%} else {%]
self.[%=self.name.ftlc()%] = [%=self.name%](self, self._enable_prefetch)
	[%}%]
self._active_streams.append(self.[%=self.name.ftlc()%])
[%}

@cached
operation Stream getTypeHintName() : String {
	if (self.inputOf.isEmpty()) {
		return "BuiltinStream";
	} else {
		return self.name;
	}
}
%]
