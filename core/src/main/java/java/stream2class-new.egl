/** This class was automatically generated and should not be modified */
package [%=package%];

import javax.annotation.Generated;
import javax.jms.*;
import org.apache.activemq.command.ActiveMQDestination;
import org.crossflow.runtime.*;
import org.apache.activemq.command.ActiveMQBytesMessage;
import java.util.concurrent.Future;

@Generated(value = "org.crossflow.java.[%=genRule%]"[% if (genDate.isDefined()) { %], date = "[%=genDate%]"[%}%])
public class [%=s.name%] extends JobStream<[%=s.type.name%]> {

	protected Task cacheManagerTask = new Task() {

		@Override
		public Workflow<?> getWorkflow() {
			return workflow;
		}

		@Override
		public String getId() {
			return "CacheManager:[%=s.name%]";
		}

		@Override
		public String getName() {
			return "CacheManager:[%=s.name%]";
		}
	};

	public [%=s.name%](Workflow<[%=w.name%]Tasks> workflow, boolean enablePrefetch) throws Exception {
		super(workflow);

		// Da li treba da vodimo racuna o vise inputa, da li tu ima dedicated qs?

		ActiveMQDestination postQ;
		ActiveMQDestination dedicatedQueue;
		[%for (t in s.inputOf){%]
			pre.put("[%=t.name%]", (ActiveMQDestination) session.createQueue("[%=s.name%]Pre.[%=t.name%]." + workflow.getInstanceId()));
			destination.put("[%=t.name%]", (ActiveMQDestination) session.createQueue("[%=s.name%]Destination.[%=t.name%]." + workflow.getInstanceId()));
			postQ = (ActiveMQDestination) session.create[%=s.eClass().name%]("[%=s.name%]Post.[%=t.name%]." + workflow.getInstanceId()
					+ (enablePrefetch?"":"?consumer.prefetchSize=1"));
			post.put("[%=t.name%]", postQ);

		[%}%]

		[%if (s.inputOf.size() != 1 or not (s.inputOf.first().masterOnly or s.inputOf.first().isKindOf(Sink))){%]
        //Da prodjemo sutra
        if (workflow.isWorker()) {
            dedicatedQueue = (ActiveMQDestination) session.createQueue("[%=s.name%]Post.[%=s.inputOf.first().name%]." + workflow.getInstanceId() + "." + workflow.getName()
                    + (enablePrefetch ? "" : "?consumer.prefetchSize=1"));
            post.put("[%=s.inputOf.first().name%]." + workflow.getName(), dedicatedQueue);
        }
       [%}%]

		for (String consumerId : pre.keySet()) {
			ActiveMQDestination preQueue = pre.get(consumerId);
			ActiveMQDestination destQueue = destination.get(consumerId);
			ActiveMQDestination postQueue = post.get(consumerId);

			if (workflow.isMaster()) {
				MessageConsumer preConsumer = session.createConsumer(preQueue);
				consumers.add(preConsumer);
				preConsumer.setMessageListener(message -> {
					try {
						workflow.cancelTermination();
						[%var isCached = not s.inputOf.exists(s|s.isTypeOf(CrossflowLanguageModel!Sink));%]
						[%if (isCached){%]
						Job job = workflow.getSerializer().deserialize(getMessageText(message));

						if (workflow.getCache() != null && workflow.getCache().hasCachedOutputs(job)) {

							workflow.setTaskInProgess(cacheManagerTask);
							Iterable<Job> cachedOutputs = workflow.getCache().getCachedOutputs(job);
							workflow.setTaskWaiting(cacheManagerTask);

							for (Job output : cachedOutputs) {
								[%for (next in s.inputOf.output.flatten()){%]
								if (output.getDestination().equals("[%=next.name%]")) {
									workflow.cancelTermination();
									(([%=w.name%]) workflow).get[%=next.name%]().send(([%=next.type.name%]) output[%if(not next.inputOf.isEmpty()){%], consumerId[%}%]);
								}
								[%}%]

							}
						} else {
						[%}%]
							MessageProducer producer = session.createProducer(destQueue);
							producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
							producer.send(message);
							producer.close();
						[%if (isCached){%]
						}
						[%}%]

					} catch (Exception ex) {
						workflow.reportInternalException(ex);
					} finally {
						try {
							message.acknowledge();
						} catch (Exception ex) {
							workflow.reportInternalException(ex);
						}
					}
				});

				MessageConsumer destinationConsumer = session.createConsumer(destQueue);
				consumers.add(destinationConsumer);
				destinationConsumer.setMessageListener(message -> {
					try {
						workflow.cancelTermination();
						Job job = workflow.getSerializer().deserialize(getMessageText(message));

						if (workflow.getCache() != null && !job.isCached())
							if(job.isTransactional())
								workflow.getCache().cacheTransactionally(job);
							else
								workflow.getCache().cache(job);
						if(job.isTransactionSuccessMessage())
							return;
						Future<Bid> workerIdFuture = workflow.publishForBidding(job);
						Bid winningBid = workerIdFuture.get();
						job.setDesignatedWorkerId(winningBid.getWorkerId());
						job.setCost(winningBid.getCost());
		           [%if (s.inputOf.size() != 1 or not (s.inputOf.first().masterOnly or s.inputOf.first().isKindOf(Sink))){%]
                        if (job.getDesignatedWorkerId() != null) {
                            ActiveMQDestination designatedPostQueue = post.get(consumerId + "." + job.getDesignatedWorkerId());
                            MessageProducer producer = session.createProducer(designatedPostQueue);
                            producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
                            producer.send(message);
                            producer.close();
                            return;
                        }
                    [%}%]
						MessageProducer producer = session.createProducer(postQueue);
						producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
						producer.send(message);
						producer.close();
					}
					catch (Exception ex) {
						workflow.reportInternalException(ex);
					} finally {
						try {
							message.acknowledge();
						} catch (Exception ex) {
							workflow.reportInternalException(ex);
						}
					}
				});
			}
		}
	}

	public void addConsumer([%=s.name%]Consumer consumer, String consumerId) throws Exception {

		ActiveMQDestination postQueue = post.get(consumerId);

		//only connect if the consumer exists (for example it will not in a master_bare situation)
		if (consumer != null) {
			MessageConsumer generalMessageConsumer = session.createConsumer(postQueue);
			consumers.add(generalMessageConsumer);
			setMessageConsumer(consumer, generalMessageConsumer, postQueue);
			if (workflow.isWorker()) {
				ActiveMQDestination dedicatedPostQueue = post.get(consumerId + "." + workflow.getName());
				MessageConsumer dedicatedMessageConsumer = session.createConsumer(dedicatedPostQueue);
				setMessageConsumer(consumer, dedicatedMessageConsumer, dedicatedPostQueue);
				consumers.add(dedicatedMessageConsumer);
			}
		}
	}

    private void setMessageConsumer([%=s.name%]Consumer consumer, MessageConsumer messageConsumer, ActiveMQDestination queue) throws JMSException {
		messageConsumer.setMessageListener(message -> {
			try {
				String messageText = getMessageText(message);
				[%=s.type.name%] [%=s.type.name.ftlc%] = null;
				if(messageText != null && messageText.length() > 0)
					[%=s.type.name.ftlc%] = workflow.getSerializer().deserialize(messageText);
				if([%=s.type.name.ftlc%] != null) {
					consumer.consume[%=s.name%]WithNotifications([%=s.type.name.ftlc%]);

					//System.out.println("Work completed in " + queue.getPhysicalName());
				}
				//else
					//System.err.println("INFO: [%=s.name%] ignoring null message.");
			} catch (Exception ex) {
				workflow.reportInternalException(ex);
			} finally {
				try {
					message.acknowledge();
				} catch (Exception ex) {
					workflow.reportInternalException(ex);
				}
			}
		});
	}

    public void addDedicatedQueue(String consumerId, String destinationId) {
        try {
            ActiveMQDestination queue = (ActiveMQDestination) session.createQueue("[%=s.name%]Post." + consumerId + "." + workflow.getInstanceId() + "." + destinationId);
            post.put(consumerId + "." + destinationId, queue);
        } catch (JMSException e) {
            e.printStackTrace();
        }
    }

	private String getMessageText(Message message) throws Exception {
		if (message instanceof TextMessage) {
			return ((TextMessage) message).getText();
		}
		else if (message instanceof ActiveMQBytesMessage) {
			ActiveMQBytesMessage bm = (ActiveMQBytesMessage) message;
			byte data[] = new byte[(int) bm.getBodyLength()];
			bm.readBytes(data);
			return new String(data);
		}
		else return "";
	}
}

[%
operation Task isSingletonTask() {
	return self.isKindOf(CrossflowLanguageModel!Source) or self.isKindOf(CrossflowLanguageModel!Sink);
}

operation CrossflowLanguageModel!Workflow getMasterTasks() {
	return self.tasks.select(t | t.isJavaTask() and (t.isKindOf(CrossflowLanguageModel!Source) or t.isKindOf(CrossflowLanguageModel!Sink) or t.masterOnly));
}

operation CrossflowLanguageModel!Workflow getWorkerTasks() {
	return self.tasks.excludingAll(self.getMasterTasks()).select(t | t.isJavaTask());
}

%]